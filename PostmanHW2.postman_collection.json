{
	"info": {
		"_postman_id": "e480970c-131f-47ac-8818-e32ac729a095",
		"name": "Postman HW 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20466197"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4.Проверить, что name в ответе равно name s request(name вбить руками)\r",
							"pm.test(\"Check test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alice\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"26\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary s request\", function () {\r",
							"    pm.expect(Number(jsonData.salary)).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_check_1_5_year = req.salary * 4\r",
							"let salary_1_5_year = jsonData.u_salary_1_5_year\r",
							"pm.test(\"Check salary after 1,5 year\", function () {\r",
							"    pm.expect(Number(jsonData.salary)).to.eql(Number(req.salary));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alice",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Alice/jjd909/69400kjkWpqc10342565909177898evny",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alice",
							"disabled": true
						},
						{
							"key": "age",
							"value": "26",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3.Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"let req_name = req[0].value\r",
							"let req_age = req[1].value\r",
							"let req_salary = req[2].value\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check resp_name = req_name\", function () {\r",
							"    pm.expect(+(jsonData.name)).to.eql(+(req_name));\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check resp_age = req_age\", function () {\r",
							"    pm.expect(Number(jsonData.age)).to.eql(Number(req_age));\r",
							"});\r",
							"console.log(jsonData.age)\r",
							"console.log(req_age)\r",
							"console.log(req_salary)\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(+(jsonData.salary)).to.eql(+(req_salary));\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check dog has name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog has age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog name = Luky\", () => {\r",
							"    const response = jsonData.family.pets.dog;\r",
							"    pm.expect(response).to.have.property(\"name\", \"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog age =  4\", () => {\r",
							"    const response = jsonData.family.pets.dog;\r",
							"    pm.expect(response).to.have.property(\"age\", 4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alice",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "26",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Alice/jjd909/69400kjkWpqc10342565909177898evny",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alice&age=26&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alice"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3.Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"let req_name = req[0].value\r",
							"let req_age = req[1].value\r",
							"let req_salary = req[2].value\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check resp_name = req_name\", function () {\r",
							"    pm.expect(+(jsonData.name)).to.eql(+(req_name));\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check resp_age = req_age\", function () {\r",
							"    pm.expect(Number(jsonData.age)).to.eql(Number(req_age));\r",
							"});\r",
							"console.log(jsonData.salary)\r",
							"console.log(req_name)\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req_salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[0] = req_salary\", function () {\r",
							"    pm.expect(+(jsonData.salary[0])).to.eql(+(req_salary));\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salary_1 = req_salary * 2\r",
							"pm.test(\"Check salary[1] = salary_2\", function () {\r",
							"    pm.expect(+(jsonData.salary[1])).to.eql(+(salary_1));\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary_2 = req_salary * 3\r",
							"pm.test(\"Check salary[2] = salary_2 \", function () {\r",
							"    pm.expect(+(jsonData.salary[2])).to.eql(+(salary_2));\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"//19. Передать в окружение переменную age\r",
							"//20. Передать в окружение переменную salary\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach(function(s){\r",
							"       console.log(s);\r",
							"   });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alice",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "26",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Alice/jjd909/69400kjkWpqc10342565909177898evny",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"description": "sa"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = req.salary\r",
							"let start_qa_salary = jsonData.start_qa_salary\r",
							"pm.test(\"Check start_qa_salary = req_salary\", function () {\r",
							"    pm.expect(+(start_qa_salary)).to.eql(+(req_salary));\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary_6 = req.salary * 2\r",
							"let qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months = req_salary_6\", function () {\r",
							"    pm.expect(+(qa_salary_after_6_months)).to.eql(+(req_salary_6));\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let req_salary_12 = req.salary * 2.7\r",
							"let qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months = req_salary_12\", function () {\r",
							"    pm.expect(+(qa_salary_after_12_months)).to.eql(+(req_salary_12));\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let req_salary_1_5 = req.salary * 3.3\r",
							"pm.test(\"Check qa_salary_after_1.5_year = req_salary_1_5\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary_1_5);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let req_salary_3_5 = req.salary * 3.8\r",
							"pm.test(\"Check qa_salary_after_3.5_year = req_salary_3_5\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary_3_5);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let person_1 = jsonData.person.u_name[1]\r",
							"pm.test(\"Check person_1 = req_salary\", function () {\r",
							"    pm.expect(+(person_1)).to.eql(+(req_salary));\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let age_1 = jsonData.person.u_age\r",
							"pm.test(\"Check u_age = req.age\", function () {\r",
							"    pm.expect(+(age_1)).to.eql(+(req.age));\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let u_salary_5_years = jsonData.person.u_salary_5_years\r",
							"let salary_5 = req.salary * 4.2\r",
							"pm.test(\"Check u_salary_5_years = salary_5\", function () {\r",
							"    pm.expect(+(u_salary_5_years)).to.eql(+(salary_5));\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"jsonData.person.forEach(function(s){\r",
							"       console.log(s);\r",
							"   });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}